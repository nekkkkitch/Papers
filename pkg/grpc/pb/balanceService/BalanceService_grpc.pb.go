// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: BalanceService.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BalanceManagement_GetBalance_FullMethodName  = "/BalanceService.BalanceManagement/GetBalance"
	BalanceManagement_AddBalance_FullMethodName  = "/BalanceService.BalanceManagement/AddBalance"
	BalanceManagement_TakeBalance_FullMethodName = "/BalanceService.BalanceManagement/TakeBalance"
)

// BalanceManagementClient is the client API for BalanceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceManagementClient interface {
	GetBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*Balance, error)
	AddBalance(ctx context.Context, in *Money, opts ...grpc.CallOption) (*Status, error)
	TakeBalance(ctx context.Context, in *Money, opts ...grpc.CallOption) (*Status, error)
}

type balanceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceManagementClient(cc grpc.ClientConnInterface) BalanceManagementClient {
	return &balanceManagementClient{cc}
}

func (c *balanceManagementClient) GetBalance(ctx context.Context, in *User, opts ...grpc.CallOption) (*Balance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Balance)
	err := c.cc.Invoke(ctx, BalanceManagement_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceManagementClient) AddBalance(ctx context.Context, in *Money, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, BalanceManagement_AddBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceManagementClient) TakeBalance(ctx context.Context, in *Money, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, BalanceManagement_TakeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceManagementServer is the server API for BalanceManagement service.
// All implementations must embed UnimplementedBalanceManagementServer
// for forward compatibility.
type BalanceManagementServer interface {
	GetBalance(context.Context, *User) (*Balance, error)
	AddBalance(context.Context, *Money) (*Status, error)
	TakeBalance(context.Context, *Money) (*Status, error)
	mustEmbedUnimplementedBalanceManagementServer()
}

// UnimplementedBalanceManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBalanceManagementServer struct{}

func (UnimplementedBalanceManagementServer) GetBalance(context.Context, *User) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBalanceManagementServer) AddBalance(context.Context, *Money) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalance not implemented")
}
func (UnimplementedBalanceManagementServer) TakeBalance(context.Context, *Money) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeBalance not implemented")
}
func (UnimplementedBalanceManagementServer) mustEmbedUnimplementedBalanceManagementServer() {}
func (UnimplementedBalanceManagementServer) testEmbeddedByValue()                           {}

// UnsafeBalanceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceManagementServer will
// result in compilation errors.
type UnsafeBalanceManagementServer interface {
	mustEmbedUnimplementedBalanceManagementServer()
}

func RegisterBalanceManagementServer(s grpc.ServiceRegistrar, srv BalanceManagementServer) {
	// If the following call pancis, it indicates UnimplementedBalanceManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BalanceManagement_ServiceDesc, srv)
}

func _BalanceManagement_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceManagementServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceManagement_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceManagementServer).GetBalance(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceManagement_AddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Money)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceManagementServer).AddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceManagement_AddBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceManagementServer).AddBalance(ctx, req.(*Money))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceManagement_TakeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Money)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceManagementServer).TakeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceManagement_TakeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceManagementServer).TakeBalance(ctx, req.(*Money))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceManagement_ServiceDesc is the grpc.ServiceDesc for BalanceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BalanceService.BalanceManagement",
	HandlerType: (*BalanceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _BalanceManagement_GetBalance_Handler,
		},
		{
			MethodName: "AddBalance",
			Handler:    _BalanceManagement_AddBalance_Handler,
		},
		{
			MethodName: "TakeBalance",
			Handler:    _BalanceManagement_TakeBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BalanceService.proto",
}
