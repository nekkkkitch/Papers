// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: PapersService.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PapersManagement_GetAvailablePapers_FullMethodName = "/PapersService.PapersManagement/GetAvailablePapers"
	PapersManagement_GetUserPapers_FullMethodName      = "/PapersService.PapersManagement/GetUserPapers"
	PapersManagement_BuyPaper_FullMethodName           = "/PapersService.PapersManagement/BuyPaper"
	PapersManagement_SellPaper_FullMethodName          = "/PapersService.PapersManagement/SellPaper"
	PapersManagement_Subscribe_FullMethodName          = "/PapersService.PapersManagement/Subscribe"
	PapersManagement_Unsubscribe_FullMethodName        = "/PapersService.PapersManagement/Unsubscribe"
)

// PapersManagementClient is the client API for PapersManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PapersManagementClient interface {
	GetAvailablePapers(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AvailablePapers, error)
	GetUserPapers(ctx context.Context, in *User, opts ...grpc.CallOption) (*AvailablePapers, error)
	BuyPaper(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error)
	SellPaper(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error)
	Subscribe(ctx context.Context, in *Paper, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Paper], error)
	Unsubscribe(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error)
}

type papersManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewPapersManagementClient(cc grpc.ClientConnInterface) PapersManagementClient {
	return &papersManagementClient{cc}
}

func (c *papersManagementClient) GetAvailablePapers(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AvailablePapers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailablePapers)
	err := c.cc.Invoke(ctx, PapersManagement_GetAvailablePapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *papersManagementClient) GetUserPapers(ctx context.Context, in *User, opts ...grpc.CallOption) (*AvailablePapers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailablePapers)
	err := c.cc.Invoke(ctx, PapersManagement_GetUserPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *papersManagementClient) BuyPaper(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PapersManagement_BuyPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *papersManagementClient) SellPaper(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PapersManagement_SellPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *papersManagementClient) Subscribe(ctx context.Context, in *Paper, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Paper], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PapersManagement_ServiceDesc.Streams[0], PapersManagement_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Paper, Paper]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PapersManagement_SubscribeClient = grpc.ServerStreamingClient[Paper]

func (c *papersManagementClient) Unsubscribe(ctx context.Context, in *Paper, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PapersManagement_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PapersManagementServer is the server API for PapersManagement service.
// All implementations must embed UnimplementedPapersManagementServer
// for forward compatibility.
type PapersManagementServer interface {
	GetAvailablePapers(context.Context, *Request) (*AvailablePapers, error)
	GetUserPapers(context.Context, *User) (*AvailablePapers, error)
	BuyPaper(context.Context, *Paper) (*Status, error)
	SellPaper(context.Context, *Paper) (*Status, error)
	Subscribe(*Paper, grpc.ServerStreamingServer[Paper]) error
	Unsubscribe(context.Context, *Paper) (*Status, error)
	mustEmbedUnimplementedPapersManagementServer()
}

// UnimplementedPapersManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPapersManagementServer struct{}

func (UnimplementedPapersManagementServer) GetAvailablePapers(context.Context, *Request) (*AvailablePapers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePapers not implemented")
}
func (UnimplementedPapersManagementServer) GetUserPapers(context.Context, *User) (*AvailablePapers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPapers not implemented")
}
func (UnimplementedPapersManagementServer) BuyPaper(context.Context, *Paper) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyPaper not implemented")
}
func (UnimplementedPapersManagementServer) SellPaper(context.Context, *Paper) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellPaper not implemented")
}
func (UnimplementedPapersManagementServer) Subscribe(*Paper, grpc.ServerStreamingServer[Paper]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPapersManagementServer) Unsubscribe(context.Context, *Paper) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedPapersManagementServer) mustEmbedUnimplementedPapersManagementServer() {}
func (UnimplementedPapersManagementServer) testEmbeddedByValue()                          {}

// UnsafePapersManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PapersManagementServer will
// result in compilation errors.
type UnsafePapersManagementServer interface {
	mustEmbedUnimplementedPapersManagementServer()
}

func RegisterPapersManagementServer(s grpc.ServiceRegistrar, srv PapersManagementServer) {
	// If the following call pancis, it indicates UnimplementedPapersManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PapersManagement_ServiceDesc, srv)
}

func _PapersManagement_GetAvailablePapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PapersManagementServer).GetAvailablePapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PapersManagement_GetAvailablePapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PapersManagementServer).GetAvailablePapers(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PapersManagement_GetUserPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PapersManagementServer).GetUserPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PapersManagement_GetUserPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PapersManagementServer).GetUserPapers(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _PapersManagement_BuyPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PapersManagementServer).BuyPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PapersManagement_BuyPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PapersManagementServer).BuyPaper(ctx, req.(*Paper))
	}
	return interceptor(ctx, in, info, handler)
}

func _PapersManagement_SellPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PapersManagementServer).SellPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PapersManagement_SellPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PapersManagementServer).SellPaper(ctx, req.(*Paper))
	}
	return interceptor(ctx, in, info, handler)
}

func _PapersManagement_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Paper)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PapersManagementServer).Subscribe(m, &grpc.GenericServerStream[Paper, Paper]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PapersManagement_SubscribeServer = grpc.ServerStreamingServer[Paper]

func _PapersManagement_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PapersManagementServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PapersManagement_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PapersManagementServer).Unsubscribe(ctx, req.(*Paper))
	}
	return interceptor(ctx, in, info, handler)
}

// PapersManagement_ServiceDesc is the grpc.ServiceDesc for PapersManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PapersManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PapersService.PapersManagement",
	HandlerType: (*PapersManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailablePapers",
			Handler:    _PapersManagement_GetAvailablePapers_Handler,
		},
		{
			MethodName: "GetUserPapers",
			Handler:    _PapersManagement_GetUserPapers_Handler,
		},
		{
			MethodName: "BuyPaper",
			Handler:    _PapersManagement_BuyPaper_Handler,
		},
		{
			MethodName: "SellPaper",
			Handler:    _PapersManagement_SellPaper_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PapersManagement_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PapersManagement_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "PapersService.proto",
}
